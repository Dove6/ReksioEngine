// Generated from ./src/interpreter/script/ReksioLangLexer.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class ReksioLangLexer extends Lexer {
	public static readonly TRUE = 1;
	public static readonly FALSE = 2;
	public static readonly NUMBER = 3;
	public static readonly CODE_STRING = 4;
	public static readonly STRING = 5;
	public static readonly COMMENT_START = 6;
	public static readonly PLUS = 7;
	public static readonly MINUS = 8;
	public static readonly ASTERISK = 9;
	public static readonly PERCENTAGE = 10;
	public static readonly AT = 11;
	public static readonly METHOD_CALL_SYMBOL = 12;
	public static readonly TYPO = 13;
	public static readonly TYPO_QUOTE = 14;
	public static readonly WHITESPACE = 15;
	public static readonly COMMA = 16;
	public static readonly FIELD_ACCESS = 17;
	public static readonly IDENTIFIER = 18;
	public static readonly BRACKET_START = 19;
	public static readonly BRACKET_END = 20;
	public static readonly OPERATION_GROUPING_START = 21;
	public static readonly OPERATION_GROUPING_END = 22;
	public static readonly STATEMENT_END = 23;
	public static readonly I_WHITESPACE = 24;
	public static readonly MISSING_QUOTE_TEXT = 25;
	public static readonly EOF = Token.EOF;
	public static readonly INSIDE = 1;
	public static readonly MISSING_QUOTE = 2;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, "';'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "TRUE", 
                                                             "FALSE", "NUMBER", 
                                                             "CODE_STRING", 
                                                             "STRING", "COMMENT_START", 
                                                             "PLUS", "MINUS", 
                                                             "ASTERISK", 
                                                             "PERCENTAGE", 
                                                             "AT", "METHOD_CALL_SYMBOL", 
                                                             "TYPO", "TYPO_QUOTE", 
                                                             "WHITESPACE", 
                                                             "COMMA", "FIELD_ACCESS", 
                                                             "IDENTIFIER", 
                                                             "BRACKET_START", 
                                                             "BRACKET_END", 
                                                             "OPERATION_GROUPING_START", 
                                                             "OPERATION_GROUPING_END", 
                                                             "STATEMENT_END", 
                                                             "I_WHITESPACE", 
                                                             "MISSING_QUOTE_TEXT" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", "INSIDE", 
                                                "MISSING_QUOTE", ];

	public static readonly ruleNames: string[] = [
		"F_TRUE", "F_FALSE", "F_NUMBER", "F_CODE_STRING", "F_STRING", "F_COMMENT_START", 
		"F_PLUS", "F_MINUS", "F_ASTERISK", "F_PERCENTAGE", "F_AT", "F_METHOD_CALL_SYMBOL", 
		"F_OPERATION_GROUPING_START", "F_OPERATION_GROUPING_END", "F_BRACKET_START", 
		"F_BRACKET_END", "F_COMMA", "F_FIELD_ACCESS", "F_TYPO", "F_TYPO_QUOTE", 
		"F_WHITESPACE", "TRUE", "FALSE", "NUMBER", "CODE_STRING", "STRING", "COMMENT_START", 
		"PLUS", "MINUS", "ASTERISK", "PERCENTAGE", "AT", "METHOD_CALL_SYMBOL", 
		"TYPO", "TYPO_QUOTE", "WHITESPACE", "COMMA", "FIELD_ACCESS", "IDENTIFIER", 
		"BRACKET_START", "BRACKET_END", "OPERATION_GROUPING_START", "OPERATION_GROUPING_END", 
		"STATEMENT_END", "I_TRUE", "I_FALSE", "I_NUMBER", "I_CODE_STRING", "I_STRING", 
		"I_COMMENT_START", "I_PLUS", "I_MINUS", "I_ASTERISK", "I_PERCENTAGE", 
		"I_AT", "I_METHOD_CALL_SYMBOL", "I_TYPO", "I_WHITESPACE", "I_COMMA", "I_FIELD_ACCESS", 
		"I_IDENTIFIER", "I_BRACKET_START", "I_BRACKET_END", "I_OPERATION_GROUPING_START", 
		"I_OPERATION_GROUPING_END", "MISSING_QUOTE_TEXT",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, ReksioLangLexer._ATN, ReksioLangLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "ReksioLangLexer.g4"; }

	public get literalNames(): (string | null)[] { return ReksioLangLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return ReksioLangLexer.symbolicNames; }
	public get ruleNames(): string[] { return ReksioLangLexer.ruleNames; }

	public get serializedATN(): number[] { return ReksioLangLexer._serializedATN; }

	public get channelNames(): string[] { return ReksioLangLexer.channelNames; }

	public get modeNames(): string[] { return ReksioLangLexer.modeNames; }

	// @Override
	public sempred(localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 38:
			return this.IDENTIFIER_sempred(localctx, predIndex);
		case 60:
			return this.I_IDENTIFIER_sempred(localctx, predIndex);
		}
		return true;
	}
	private IDENTIFIER_sempred(localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return  this.text.match(/[A-Za-z$]/) !== null ;
		}
		return true;
	}
	private I_IDENTIFIER_sempred(localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return  this.text.match(/[A-Za-z$]/) !== null ;
		}
		return true;
	}

	public static readonly _serializedATN: number[] = [4,0,25,392,6,-1,6,-1,
	6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,
	8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,
	15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,
	2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,
	30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,
	7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,
	44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,
	2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
	59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,1,0,
	1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,144,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,3,1,156,8,1,1,2,4,2,159,8,2,11,2,12,2,160,1,2,1,2,4,2,165,8,2,11,
	2,12,2,166,3,2,169,8,2,1,3,1,3,1,3,1,3,5,3,175,8,3,10,3,12,3,178,9,3,1,
	3,1,3,1,3,1,4,1,4,5,4,185,8,4,10,4,12,4,188,9,4,1,4,1,4,1,5,4,5,193,8,5,
	11,5,12,5,194,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
	1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,
	19,1,20,4,20,226,8,20,11,20,12,20,227,1,21,1,21,1,22,1,22,1,23,1,23,1,24,
	1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,
	31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,
	1,37,1,37,1,38,4,38,269,8,38,11,38,12,38,270,1,38,1,38,1,39,1,39,1,39,1,
	39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,
	1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,
	47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,
	1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,
	54,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,
	1,58,1,58,1,59,1,59,1,59,1,59,1,60,4,60,358,8,60,11,60,12,60,359,1,60,1,
	60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,63,1,63,
	1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,65,4,65,387,8,65,11,65,12,65,
	388,1,65,1,65,0,0,66,3,0,5,0,7,0,9,0,11,0,13,0,15,0,17,0,19,0,21,0,23,0,
	25,0,27,0,29,0,31,0,33,0,35,0,37,0,39,0,41,0,43,0,45,1,47,2,49,3,51,4,53,
	5,55,6,57,7,59,8,61,9,63,10,65,11,67,12,69,13,71,14,73,15,75,16,77,17,79,
	18,81,19,83,20,85,21,87,22,89,23,91,0,93,0,95,0,97,0,99,0,101,0,103,0,105,
	0,107,0,109,0,111,0,113,0,115,0,117,24,119,0,121,0,123,0,125,0,127,0,129,
	0,131,0,133,25,3,0,1,2,8,1,0,48,57,1,0,123,123,2,0,41,41,43,44,2,0,58,58,
	62,62,3,0,9,10,12,13,32,32,6,0,36,36,45,45,48,57,65,90,95,95,97,122,5,0,
	36,36,48,57,65,90,95,95,97,122,2,0,41,41,44,44,380,0,45,1,0,0,0,0,47,1,
	0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
	0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
	0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
	0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,1,91,1,
	0,0,0,1,93,1,0,0,0,1,95,1,0,0,0,1,97,1,0,0,0,1,99,1,0,0,0,1,101,1,0,0,0,
	1,103,1,0,0,0,1,105,1,0,0,0,1,107,1,0,0,0,1,109,1,0,0,0,1,111,1,0,0,0,1,
	113,1,0,0,0,1,115,1,0,0,0,1,117,1,0,0,0,1,119,1,0,0,0,1,121,1,0,0,0,1,123,
	1,0,0,0,1,125,1,0,0,0,1,127,1,0,0,0,1,129,1,0,0,0,1,131,1,0,0,0,2,133,1,
	0,0,0,3,143,1,0,0,0,5,155,1,0,0,0,7,158,1,0,0,0,9,170,1,0,0,0,11,182,1,
	0,0,0,13,192,1,0,0,0,15,196,1,0,0,0,17,198,1,0,0,0,19,200,1,0,0,0,21,202,
	1,0,0,0,23,204,1,0,0,0,25,206,1,0,0,0,27,208,1,0,0,0,29,210,1,0,0,0,31,
	212,1,0,0,0,33,214,1,0,0,0,35,216,1,0,0,0,37,218,1,0,0,0,39,220,1,0,0,0,
	41,222,1,0,0,0,43,225,1,0,0,0,45,229,1,0,0,0,47,231,1,0,0,0,49,233,1,0,
	0,0,51,235,1,0,0,0,53,237,1,0,0,0,55,239,1,0,0,0,57,241,1,0,0,0,59,243,
	1,0,0,0,61,245,1,0,0,0,63,247,1,0,0,0,65,249,1,0,0,0,67,251,1,0,0,0,69,
	253,1,0,0,0,71,255,1,0,0,0,73,259,1,0,0,0,75,263,1,0,0,0,77,265,1,0,0,0,
	79,268,1,0,0,0,81,274,1,0,0,0,83,278,1,0,0,0,85,282,1,0,0,0,87,286,1,0,
	0,0,89,290,1,0,0,0,91,292,1,0,0,0,93,296,1,0,0,0,95,300,1,0,0,0,97,304,
	1,0,0,0,99,308,1,0,0,0,101,312,1,0,0,0,103,316,1,0,0,0,105,320,1,0,0,0,
	107,324,1,0,0,0,109,328,1,0,0,0,111,332,1,0,0,0,113,336,1,0,0,0,115,340,
	1,0,0,0,117,344,1,0,0,0,119,348,1,0,0,0,121,352,1,0,0,0,123,357,1,0,0,0,
	125,365,1,0,0,0,127,370,1,0,0,0,129,375,1,0,0,0,131,380,1,0,0,0,133,386,
	1,0,0,0,135,136,5,84,0,0,136,137,5,82,0,0,137,138,5,85,0,0,138,144,5,69,
	0,0,139,140,5,116,0,0,140,141,5,114,0,0,141,142,5,117,0,0,142,144,5,101,
	0,0,143,135,1,0,0,0,143,139,1,0,0,0,144,4,1,0,0,0,145,146,5,70,0,0,146,
	147,5,65,0,0,147,148,5,76,0,0,148,149,5,83,0,0,149,156,5,69,0,0,150,151,
	5,102,0,0,151,152,5,97,0,0,152,153,5,108,0,0,153,154,5,115,0,0,154,156,
	5,101,0,0,155,145,1,0,0,0,155,150,1,0,0,0,156,6,1,0,0,0,157,159,7,0,0,0,
	158,157,1,0,0,0,159,160,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,168,
	1,0,0,0,162,164,5,46,0,0,163,165,7,0,0,0,164,163,1,0,0,0,165,166,1,0,0,
	0,166,164,1,0,0,0,166,167,1,0,0,0,167,169,1,0,0,0,168,162,1,0,0,0,168,169,
	1,0,0,0,169,8,1,0,0,0,170,171,5,34,0,0,171,172,5,123,0,0,172,176,1,0,0,
	0,173,175,8,1,0,0,174,173,1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,177,
	1,0,0,0,177,179,1,0,0,0,178,176,1,0,0,0,179,180,5,125,0,0,180,181,5,34,
	0,0,181,10,1,0,0,0,182,186,5,34,0,0,183,185,8,2,0,0,184,183,1,0,0,0,185,
	188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,189,1,0,0,0,188,186,1,0,
	0,0,189,190,5,34,0,0,190,12,1,0,0,0,191,193,5,33,0,0,192,191,1,0,0,0,193,
	194,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,14,1,0,0,0,196,197,5,43,
	0,0,197,16,1,0,0,0,198,199,5,45,0,0,199,18,1,0,0,0,200,201,5,42,0,0,201,
	20,1,0,0,0,202,203,5,37,0,0,203,22,1,0,0,0,204,205,5,64,0,0,205,24,1,0,
	0,0,206,207,5,94,0,0,207,26,1,0,0,0,208,209,5,91,0,0,209,28,1,0,0,0,210,
	211,5,93,0,0,211,30,1,0,0,0,212,213,5,40,0,0,213,32,1,0,0,0,214,215,5,41,
	0,0,215,34,1,0,0,0,216,217,5,44,0,0,217,36,1,0,0,0,218,219,5,124,0,0,219,
	38,1,0,0,0,220,221,7,3,0,0,221,40,1,0,0,0,222,223,5,34,0,0,223,42,1,0,0,
	0,224,226,7,4,0,0,225,224,1,0,0,0,226,227,1,0,0,0,227,225,1,0,0,0,227,228,
	1,0,0,0,228,44,1,0,0,0,229,230,3,3,0,0,230,46,1,0,0,0,231,232,3,5,1,0,232,
	48,1,0,0,0,233,234,3,7,2,0,234,50,1,0,0,0,235,236,3,9,3,0,236,52,1,0,0,
	0,237,238,3,11,4,0,238,54,1,0,0,0,239,240,3,13,5,0,240,56,1,0,0,0,241,242,
	3,15,6,0,242,58,1,0,0,0,243,244,3,17,7,0,244,60,1,0,0,0,245,246,3,19,8,
	0,246,62,1,0,0,0,247,248,3,21,9,0,248,64,1,0,0,0,249,250,3,23,10,0,250,
	66,1,0,0,0,251,252,3,25,11,0,252,68,1,0,0,0,253,254,3,39,18,0,254,70,1,
	0,0,0,255,256,3,41,19,0,256,257,1,0,0,0,257,258,6,34,0,0,258,72,1,0,0,0,
	259,260,3,43,20,0,260,261,1,0,0,0,261,262,6,35,1,0,262,74,1,0,0,0,263,264,
	3,35,16,0,264,76,1,0,0,0,265,266,3,37,17,0,266,78,1,0,0,0,267,269,7,5,0,
	0,268,267,1,0,0,0,269,270,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,272,
	1,0,0,0,272,273,4,38,0,0,273,80,1,0,0,0,274,275,3,31,14,0,275,276,1,0,0,
	0,276,277,6,39,2,0,277,82,1,0,0,0,278,279,3,33,15,0,279,280,1,0,0,0,280,
	281,6,40,3,0,281,84,1,0,0,0,282,283,3,27,12,0,283,284,1,0,0,0,284,285,6,
	41,4,0,285,86,1,0,0,0,286,287,3,29,13,0,287,288,1,0,0,0,288,289,6,42,3,
	0,289,88,1,0,0,0,290,291,5,59,0,0,291,90,1,0,0,0,292,293,3,3,0,0,293,294,
	1,0,0,0,294,295,6,44,5,0,295,92,1,0,0,0,296,297,3,5,1,0,297,298,1,0,0,0,
	298,299,6,45,6,0,299,94,1,0,0,0,300,301,3,7,2,0,301,302,1,0,0,0,302,303,
	6,46,7,0,303,96,1,0,0,0,304,305,3,9,3,0,305,306,1,0,0,0,306,307,6,47,8,
	0,307,98,1,0,0,0,308,309,3,11,4,0,309,310,1,0,0,0,310,311,6,48,9,0,311,
	100,1,0,0,0,312,313,3,13,5,0,313,314,1,0,0,0,314,315,6,49,10,0,315,102,
	1,0,0,0,316,317,3,15,6,0,317,318,1,0,0,0,318,319,6,50,11,0,319,104,1,0,
	0,0,320,321,3,17,7,0,321,322,1,0,0,0,322,323,6,51,12,0,323,106,1,0,0,0,
	324,325,3,19,8,0,325,326,1,0,0,0,326,327,6,52,13,0,327,108,1,0,0,0,328,
	329,3,21,9,0,329,330,1,0,0,0,330,331,6,53,14,0,331,110,1,0,0,0,332,333,
	3,23,10,0,333,334,1,0,0,0,334,335,6,54,15,0,335,112,1,0,0,0,336,337,3,25,
	11,0,337,338,1,0,0,0,338,339,6,55,16,0,339,114,1,0,0,0,340,341,3,39,18,
	0,341,342,1,0,0,0,342,343,6,56,17,0,343,116,1,0,0,0,344,345,3,43,20,0,345,
	346,1,0,0,0,346,347,6,57,1,0,347,118,1,0,0,0,348,349,3,35,16,0,349,350,
	1,0,0,0,350,351,6,58,18,0,351,120,1,0,0,0,352,353,3,37,17,0,353,354,1,0,
	0,0,354,355,6,59,19,0,355,122,1,0,0,0,356,358,7,6,0,0,357,356,1,0,0,0,358,
	359,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,361,1,0,0,0,361,362,4,60,
	1,0,362,363,1,0,0,0,363,364,6,60,20,0,364,124,1,0,0,0,365,366,3,31,14,0,
	366,367,1,0,0,0,367,368,6,61,21,0,368,369,6,61,2,0,369,126,1,0,0,0,370,
	371,3,33,15,0,371,372,1,0,0,0,372,373,6,62,22,0,373,374,6,62,3,0,374,128,
	1,0,0,0,375,376,3,27,12,0,376,377,1,0,0,0,377,378,6,63,23,0,378,379,6,63,
	4,0,379,130,1,0,0,0,380,381,3,29,13,0,381,382,1,0,0,0,382,383,6,64,24,0,
	383,384,6,64,3,0,384,132,1,0,0,0,385,387,8,7,0,0,386,385,1,0,0,0,387,388,
	1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,391,6,65,3,
	0,391,134,1,0,0,0,15,0,1,2,143,155,160,166,168,176,186,194,227,270,359,
	388,25,5,2,0,6,0,0,5,0,0,4,0,0,5,1,0,7,1,0,7,2,0,7,3,0,7,4,0,7,5,0,7,6,
	0,7,7,0,7,8,0,7,9,0,7,10,0,7,11,0,7,12,0,7,13,0,7,16,0,7,17,0,7,18,0,7,
	19,0,7,20,0,7,21,0,7,22,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ReksioLangLexer.__ATN) {
			ReksioLangLexer.__ATN = new ATNDeserializer().deserialize(ReksioLangLexer._serializedATN);
		}

		return ReksioLangLexer.__ATN;
	}


	static DecisionsToDFA = ReksioLangLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}
// Generated from ./src/interpreter/script/ReksioLangLexer.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class ReksioLangLexer extends Lexer {
	public static readonly TRUE = 1;
	public static readonly FALSE = 2;
	public static readonly NUMBER = 3;
	public static readonly CODE_STRING = 4;
	public static readonly STRING = 5;
	public static readonly COMMENT_START = 6;
	public static readonly ADD = 7;
	public static readonly SUB = 8;
	public static readonly MUL = 9;
	public static readonly MOD = 10;
	public static readonly DIV = 11;
	public static readonly METHOD_CALL_SYMBOL = 12;
	public static readonly TYPO = 13;
	public static readonly TYPO_QUOTE = 14;
	public static readonly WHITESPACE = 15;
	public static readonly COMMA = 16;
	public static readonly IDENTIFIER = 17;
	public static readonly BRACKET_START = 18;
	public static readonly BRACKET_END = 19;
	public static readonly OPERATION_GROUPING_START = 20;
	public static readonly OPERATION_GROUPING_END = 21;
	public static readonly STATEMENT_END = 22;
	public static readonly I_WHITESPACE = 23;
	public static readonly MISSING_QUOTE_TEXT = 24;
	public static readonly EOF = Token.EOF;
	public static readonly INSIDE = 1;
	public static readonly MISSING_QUOTE = 2;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            "';'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "TRUE", 
                                                             "FALSE", "NUMBER", 
                                                             "CODE_STRING", 
                                                             "STRING", "COMMENT_START", 
                                                             "ADD", "SUB", 
                                                             "MUL", "MOD", 
                                                             "DIV", "METHOD_CALL_SYMBOL", 
                                                             "TYPO", "TYPO_QUOTE", 
                                                             "WHITESPACE", 
                                                             "COMMA", "IDENTIFIER", 
                                                             "BRACKET_START", 
                                                             "BRACKET_END", 
                                                             "OPERATION_GROUPING_START", 
                                                             "OPERATION_GROUPING_END", 
                                                             "STATEMENT_END", 
                                                             "I_WHITESPACE", 
                                                             "MISSING_QUOTE_TEXT" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", "INSIDE", 
                                                "MISSING_QUOTE", ];

	public static readonly ruleNames: string[] = [
		"F_TRUE", "F_FALSE", "F_NUMBER", "F_CODE_STRING", "F_STRING", "F_COMMENT_START", 
		"F_ADD", "F_SUB", "F_MUL", "F_MOD", "F_DIV", "F_METHOD_CALL_SYMBOL", "F_OPERATION_GROUPING_START", 
		"F_OPERATION_GROUPING_END", "F_BRACKET_START", "F_BRACKET_END", "F_COMMA", 
		"F_TYPO", "F_TYPO_QUOTE", "F_WHITESPACE", "TRUE", "FALSE", "NUMBER", "CODE_STRING", 
		"STRING", "COMMENT_START", "ADD", "SUB", "MUL", "MOD", "DIV", "METHOD_CALL_SYMBOL", 
		"TYPO", "TYPO_QUOTE", "WHITESPACE", "COMMA", "IDENTIFIER", "BRACKET_START", 
		"BRACKET_END", "OPERATION_GROUPING_START", "OPERATION_GROUPING_END", "STATEMENT_END", 
		"I_TRUE", "I_FALSE", "I_NUMBER", "I_CODE_STRING", "I_STRING", "I_COMMENT_START", 
		"I_ADD", "I_SUB", "I_MUL", "I_MOD", "I_DIV", "I_METHOD_CALL_SYMBOL", "I_TYPO", 
		"I_WHITESPACE", "I_COMMA", "I_IDENTIFIER", "I_BRACKET_START", "I_BRACKET_END", 
		"I_OPERATION_GROUPING_START", "I_OPERATION_GROUPING_END", "MISSING_QUOTE_TEXT",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, ReksioLangLexer._ATN, ReksioLangLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "ReksioLangLexer.g4"; }

	public get literalNames(): (string | null)[] { return ReksioLangLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return ReksioLangLexer.symbolicNames; }
	public get ruleNames(): string[] { return ReksioLangLexer.ruleNames; }

	public get serializedATN(): number[] { return ReksioLangLexer._serializedATN; }

	public get channelNames(): string[] { return ReksioLangLexer.channelNames; }

	public get modeNames(): string[] { return ReksioLangLexer.modeNames; }

	// @Override
	public sempred(localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 36:
			return this.IDENTIFIER_sempred(localctx, predIndex);
		case 57:
			return this.I_IDENTIFIER_sempred(localctx, predIndex);
		}
		return true;
	}
	private IDENTIFIER_sempred(localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return  this.text.match(/[A-Za-z$]/) !== null ;
		}
		return true;
	}
	private I_IDENTIFIER_sempred(localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return  this.text.match(/[A-Za-z$]/) !== null ;
		}
		return true;
	}

	public static readonly _serializedATN: number[] = [4,0,24,367,6,-1,6,-1,
	6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,
	8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,
	15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,
	2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,
	30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,
	7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,
	44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,
	2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
	59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
	1,1,1,1,1,1,2,4,2,142,8,2,11,2,12,2,143,1,2,1,2,4,2,148,8,2,11,2,12,2,149,
	3,2,152,8,2,1,3,1,3,1,3,1,3,5,3,158,8,3,10,3,12,3,161,9,3,1,3,1,3,1,3,1,
	4,1,4,5,4,168,8,4,10,4,12,4,171,9,4,1,4,1,4,1,5,4,5,176,8,5,11,5,12,5,177,
	1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
	1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,4,19,207,8,19,11,
	19,12,19,208,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,
	1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,
	33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,36,4,36,248,8,36,11,36,
	12,36,249,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,
	39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,
	1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,
	47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,
	1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,
	54,1,54,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,57,4,57,333,8,57,11,57,
	12,57,334,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,
	59,1,59,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,62,4,62,362,
	8,62,11,62,12,62,363,1,62,1,62,0,0,63,3,0,5,0,7,0,9,0,11,0,13,0,15,0,17,
	0,19,0,21,0,23,0,25,0,27,0,29,0,31,0,33,0,35,0,37,0,39,0,41,0,43,1,45,2,
	47,3,49,4,51,5,53,6,55,7,57,8,59,9,61,10,63,11,65,12,67,13,69,14,71,15,
	73,16,75,17,77,18,79,19,81,20,83,21,85,22,87,0,89,0,91,0,93,0,95,0,97,0,
	99,0,101,0,103,0,105,0,107,0,109,0,111,0,113,23,115,0,117,0,119,0,121,0,
	123,0,125,0,127,24,3,0,1,2,7,1,0,48,57,1,0,123,123,2,0,41,41,44,44,2,0,
	58,58,62,62,3,0,9,10,12,13,32,32,6,0,36,36,45,45,48,57,65,90,95,95,97,122,
	5,0,36,36,48,57,65,90,95,95,97,122,354,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
	0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
	0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
	0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
	0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,1,87,1,0,0,0,1,89,1,0,0,0,1,91,1,
	0,0,0,1,93,1,0,0,0,1,95,1,0,0,0,1,97,1,0,0,0,1,99,1,0,0,0,1,101,1,0,0,0,
	1,103,1,0,0,0,1,105,1,0,0,0,1,107,1,0,0,0,1,109,1,0,0,0,1,111,1,0,0,0,1,
	113,1,0,0,0,1,115,1,0,0,0,1,117,1,0,0,0,1,119,1,0,0,0,1,121,1,0,0,0,1,123,
	1,0,0,0,1,125,1,0,0,0,2,127,1,0,0,0,3,129,1,0,0,0,5,134,1,0,0,0,7,141,1,
	0,0,0,9,153,1,0,0,0,11,165,1,0,0,0,13,175,1,0,0,0,15,179,1,0,0,0,17,181,
	1,0,0,0,19,183,1,0,0,0,21,185,1,0,0,0,23,187,1,0,0,0,25,189,1,0,0,0,27,
	191,1,0,0,0,29,193,1,0,0,0,31,195,1,0,0,0,33,197,1,0,0,0,35,199,1,0,0,0,
	37,201,1,0,0,0,39,203,1,0,0,0,41,206,1,0,0,0,43,210,1,0,0,0,45,212,1,0,
	0,0,47,214,1,0,0,0,49,216,1,0,0,0,51,218,1,0,0,0,53,220,1,0,0,0,55,222,
	1,0,0,0,57,224,1,0,0,0,59,226,1,0,0,0,61,228,1,0,0,0,63,230,1,0,0,0,65,
	232,1,0,0,0,67,234,1,0,0,0,69,236,1,0,0,0,71,240,1,0,0,0,73,244,1,0,0,0,
	75,247,1,0,0,0,77,253,1,0,0,0,79,257,1,0,0,0,81,261,1,0,0,0,83,265,1,0,
	0,0,85,269,1,0,0,0,87,271,1,0,0,0,89,275,1,0,0,0,91,279,1,0,0,0,93,283,
	1,0,0,0,95,287,1,0,0,0,97,291,1,0,0,0,99,295,1,0,0,0,101,299,1,0,0,0,103,
	303,1,0,0,0,105,307,1,0,0,0,107,311,1,0,0,0,109,315,1,0,0,0,111,319,1,0,
	0,0,113,323,1,0,0,0,115,327,1,0,0,0,117,332,1,0,0,0,119,340,1,0,0,0,121,
	345,1,0,0,0,123,350,1,0,0,0,125,355,1,0,0,0,127,361,1,0,0,0,129,130,5,84,
	0,0,130,131,5,82,0,0,131,132,5,85,0,0,132,133,5,69,0,0,133,4,1,0,0,0,134,
	135,5,70,0,0,135,136,5,65,0,0,136,137,5,76,0,0,137,138,5,83,0,0,138,139,
	5,69,0,0,139,6,1,0,0,0,140,142,7,0,0,0,141,140,1,0,0,0,142,143,1,0,0,0,
	143,141,1,0,0,0,143,144,1,0,0,0,144,151,1,0,0,0,145,147,5,46,0,0,146,148,
	7,0,0,0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,
	150,152,1,0,0,0,151,145,1,0,0,0,151,152,1,0,0,0,152,8,1,0,0,0,153,154,5,
	34,0,0,154,155,5,123,0,0,155,159,1,0,0,0,156,158,8,1,0,0,157,156,1,0,0,
	0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,162,1,0,0,0,161,159,
	1,0,0,0,162,163,5,125,0,0,163,164,5,34,0,0,164,10,1,0,0,0,165,169,5,34,
	0,0,166,168,8,2,0,0,167,166,1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,0,169,
	170,1,0,0,0,170,172,1,0,0,0,171,169,1,0,0,0,172,173,5,34,0,0,173,12,1,0,
	0,0,174,176,5,33,0,0,175,174,1,0,0,0,176,177,1,0,0,0,177,175,1,0,0,0,177,
	178,1,0,0,0,178,14,1,0,0,0,179,180,5,43,0,0,180,16,1,0,0,0,181,182,5,45,
	0,0,182,18,1,0,0,0,183,184,5,42,0,0,184,20,1,0,0,0,185,186,5,37,0,0,186,
	22,1,0,0,0,187,188,5,64,0,0,188,24,1,0,0,0,189,190,5,94,0,0,190,26,1,0,
	0,0,191,192,5,91,0,0,192,28,1,0,0,0,193,194,5,93,0,0,194,30,1,0,0,0,195,
	196,5,40,0,0,196,32,1,0,0,0,197,198,5,41,0,0,198,34,1,0,0,0,199,200,5,44,
	0,0,200,36,1,0,0,0,201,202,7,3,0,0,202,38,1,0,0,0,203,204,5,34,0,0,204,
	40,1,0,0,0,205,207,7,4,0,0,206,205,1,0,0,0,207,208,1,0,0,0,208,206,1,0,
	0,0,208,209,1,0,0,0,209,42,1,0,0,0,210,211,3,3,0,0,211,44,1,0,0,0,212,213,
	3,5,1,0,213,46,1,0,0,0,214,215,3,7,2,0,215,48,1,0,0,0,216,217,3,9,3,0,217,
	50,1,0,0,0,218,219,3,11,4,0,219,52,1,0,0,0,220,221,3,13,5,0,221,54,1,0,
	0,0,222,223,3,15,6,0,223,56,1,0,0,0,224,225,3,17,7,0,225,58,1,0,0,0,226,
	227,3,19,8,0,227,60,1,0,0,0,228,229,3,21,9,0,229,62,1,0,0,0,230,231,3,23,
	10,0,231,64,1,0,0,0,232,233,3,25,11,0,233,66,1,0,0,0,234,235,3,37,17,0,
	235,68,1,0,0,0,236,237,3,39,18,0,237,238,1,0,0,0,238,239,6,33,0,0,239,70,
	1,0,0,0,240,241,3,41,19,0,241,242,1,0,0,0,242,243,6,34,1,0,243,72,1,0,0,
	0,244,245,3,35,16,0,245,74,1,0,0,0,246,248,7,5,0,0,247,246,1,0,0,0,248,
	249,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,251,1,0,0,0,251,252,4,36,
	0,0,252,76,1,0,0,0,253,254,3,31,14,0,254,255,1,0,0,0,255,256,6,37,2,0,256,
	78,1,0,0,0,257,258,3,33,15,0,258,259,1,0,0,0,259,260,6,38,3,0,260,80,1,
	0,0,0,261,262,3,27,12,0,262,263,1,0,0,0,263,264,6,39,4,0,264,82,1,0,0,0,
	265,266,3,29,13,0,266,267,1,0,0,0,267,268,6,40,3,0,268,84,1,0,0,0,269,270,
	5,59,0,0,270,86,1,0,0,0,271,272,3,3,0,0,272,273,1,0,0,0,273,274,6,42,5,
	0,274,88,1,0,0,0,275,276,3,5,1,0,276,277,1,0,0,0,277,278,6,43,6,0,278,90,
	1,0,0,0,279,280,3,7,2,0,280,281,1,0,0,0,281,282,6,44,7,0,282,92,1,0,0,0,
	283,284,3,9,3,0,284,285,1,0,0,0,285,286,6,45,8,0,286,94,1,0,0,0,287,288,
	3,11,4,0,288,289,1,0,0,0,289,290,6,46,9,0,290,96,1,0,0,0,291,292,3,13,5,
	0,292,293,1,0,0,0,293,294,6,47,10,0,294,98,1,0,0,0,295,296,3,15,6,0,296,
	297,1,0,0,0,297,298,6,48,11,0,298,100,1,0,0,0,299,300,3,17,7,0,300,301,
	1,0,0,0,301,302,6,49,12,0,302,102,1,0,0,0,303,304,3,19,8,0,304,305,1,0,
	0,0,305,306,6,50,13,0,306,104,1,0,0,0,307,308,3,21,9,0,308,309,1,0,0,0,
	309,310,6,51,14,0,310,106,1,0,0,0,311,312,3,23,10,0,312,313,1,0,0,0,313,
	314,6,52,15,0,314,108,1,0,0,0,315,316,3,25,11,0,316,317,1,0,0,0,317,318,
	6,53,16,0,318,110,1,0,0,0,319,320,3,37,17,0,320,321,1,0,0,0,321,322,6,54,
	17,0,322,112,1,0,0,0,323,324,3,41,19,0,324,325,1,0,0,0,325,326,6,55,1,0,
	326,114,1,0,0,0,327,328,3,35,16,0,328,329,1,0,0,0,329,330,6,56,18,0,330,
	116,1,0,0,0,331,333,7,6,0,0,332,331,1,0,0,0,333,334,1,0,0,0,334,332,1,0,
	0,0,334,335,1,0,0,0,335,336,1,0,0,0,336,337,4,57,1,0,337,338,1,0,0,0,338,
	339,6,57,19,0,339,118,1,0,0,0,340,341,3,31,14,0,341,342,1,0,0,0,342,343,
	6,58,20,0,343,344,6,58,2,0,344,120,1,0,0,0,345,346,3,33,15,0,346,347,1,
	0,0,0,347,348,6,59,21,0,348,349,6,59,3,0,349,122,1,0,0,0,350,351,3,27,12,
	0,351,352,1,0,0,0,352,353,6,60,22,0,353,354,6,60,4,0,354,124,1,0,0,0,355,
	356,3,29,13,0,356,357,1,0,0,0,357,358,6,61,23,0,358,359,6,61,3,0,359,126,
	1,0,0,0,360,362,8,2,0,0,361,360,1,0,0,0,362,363,1,0,0,0,363,361,1,0,0,0,
	363,364,1,0,0,0,364,365,1,0,0,0,365,366,6,62,3,0,366,128,1,0,0,0,13,0,1,
	2,143,149,151,159,169,177,208,249,334,363,24,5,2,0,6,0,0,5,0,0,4,0,0,5,
	1,0,7,1,0,7,2,0,7,3,0,7,4,0,7,5,0,7,6,0,7,7,0,7,8,0,7,9,0,7,10,0,7,11,0,
	7,12,0,7,13,0,7,16,0,7,17,0,7,18,0,7,19,0,7,20,0,7,21,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ReksioLangLexer.__ATN) {
			ReksioLangLexer.__ATN = new ATNDeserializer().deserialize(ReksioLangLexer._serializedATN);
		}

		return ReksioLangLexer.__ATN;
	}


	static DecisionsToDFA = ReksioLangLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}
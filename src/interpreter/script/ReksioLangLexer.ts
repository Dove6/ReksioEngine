// Generated from ./src/interpreter/script/ReksioLangLexer.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class ReksioLangLexer extends Lexer {
	public static readonly TRUE = 1;
	public static readonly FALSE = 2;
	public static readonly NUMBER = 3;
	public static readonly CODE_STRING = 4;
	public static readonly STRING = 5;
	public static readonly COMMENT_START = 6;
	public static readonly PLUS = 7;
	public static readonly MINUS = 8;
	public static readonly ASTERISK = 9;
	public static readonly PERCENTAGE = 10;
	public static readonly AT = 11;
	public static readonly METHOD_CALL_SYMBOL = 12;
	public static readonly TYPO = 13;
	public static readonly TYPO_QUOTE = 14;
	public static readonly WHITESPACE = 15;
	public static readonly COMMA = 16;
	public static readonly FIELD_ACCESS = 17;
	public static readonly IDENTIFIER = 18;
	public static readonly BRACKET_START = 19;
	public static readonly BRACKET_END = 20;
	public static readonly OPERATION_GROUPING_START = 21;
	public static readonly OPERATION_GROUPING_END = 22;
	public static readonly STATEMENT_END = 23;
	public static readonly I_WHITESPACE = 24;
	public static readonly MISSING_QUOTE_TEXT = 25;
	public static readonly EOF = Token.EOF;
	public static readonly INSIDE = 1;
	public static readonly MISSING_QUOTE = 2;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, "';'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "TRUE", 
                                                             "FALSE", "NUMBER", 
                                                             "CODE_STRING", 
                                                             "STRING", "COMMENT_START", 
                                                             "PLUS", "MINUS", 
                                                             "ASTERISK", 
                                                             "PERCENTAGE", 
                                                             "AT", "METHOD_CALL_SYMBOL", 
                                                             "TYPO", "TYPO_QUOTE", 
                                                             "WHITESPACE", 
                                                             "COMMA", "FIELD_ACCESS", 
                                                             "IDENTIFIER", 
                                                             "BRACKET_START", 
                                                             "BRACKET_END", 
                                                             "OPERATION_GROUPING_START", 
                                                             "OPERATION_GROUPING_END", 
                                                             "STATEMENT_END", 
                                                             "I_WHITESPACE", 
                                                             "MISSING_QUOTE_TEXT" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", "INSIDE", 
                                                "MISSING_QUOTE", ];

	public static readonly ruleNames: string[] = [
		"F_TRUE", "F_FALSE", "F_NUMBER", "F_CODE_STRING", "F_STRING", "F_COMMENT_START", 
		"F_PLUS", "F_MINUS", "F_ASTERISK", "F_PERCENTAGE", "F_AT", "F_METHOD_CALL_SYMBOL", 
		"F_OPERATION_GROUPING_START", "F_OPERATION_GROUPING_END", "F_BRACKET_START", 
		"F_BRACKET_END", "F_COMMA", "F_FIELD_ACCESS", "F_TYPO", "F_TYPO_QUOTE", 
		"F_WHITESPACE", "TRUE", "FALSE", "NUMBER", "CODE_STRING", "STRING", "COMMENT_START", 
		"PLUS", "MINUS", "ASTERISK", "PERCENTAGE", "AT", "METHOD_CALL_SYMBOL", 
		"TYPO", "TYPO_QUOTE", "WHITESPACE", "COMMA", "FIELD_ACCESS", "IDENTIFIER", 
		"BRACKET_START", "BRACKET_END", "OPERATION_GROUPING_START", "OPERATION_GROUPING_END", 
		"STATEMENT_END", "I_TRUE", "I_FALSE", "I_NUMBER", "I_CODE_STRING", "I_STRING", 
		"I_COMMENT_START", "I_PLUS", "I_MINUS", "I_ASTERISK", "I_PERCENTAGE", 
		"I_AT", "I_METHOD_CALL_SYMBOL", "I_TYPO", "I_WHITESPACE", "I_COMMA", "I_FIELD_ACCESS", 
		"I_IDENTIFIER", "I_BRACKET_START", "I_BRACKET_END", "I_OPERATION_GROUPING_START", 
		"I_OPERATION_GROUPING_END", "MISSING_QUOTE_TEXT",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, ReksioLangLexer._ATN, ReksioLangLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "ReksioLangLexer.g4"; }

	public get literalNames(): (string | null)[] { return ReksioLangLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return ReksioLangLexer.symbolicNames; }
	public get ruleNames(): string[] { return ReksioLangLexer.ruleNames; }

	public get serializedATN(): number[] { return ReksioLangLexer._serializedATN; }

	public get channelNames(): string[] { return ReksioLangLexer.channelNames; }

	public get modeNames(): string[] { return ReksioLangLexer.modeNames; }

	// @Override
	public sempred(localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 38:
			return this.IDENTIFIER_sempred(localctx, predIndex);
		case 60:
			return this.I_IDENTIFIER_sempred(localctx, predIndex);
		}
		return true;
	}
	private IDENTIFIER_sempred(localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return  this.text.match(/[A-Za-z$]/) !== null ;
		}
		return true;
	}
	private I_IDENTIFIER_sempred(localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return  this.text.match(/[A-Za-z$]/) !== null ;
		}
		return true;
	}

	public static readonly _serializedATN: number[] = [4,0,25,381,6,-1,6,-1,
	6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,
	8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,
	15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,
	2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,
	30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,
	7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,
	44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,
	2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
	59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,1,0,
	1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,4,2,148,8,2,11,2,12,2,149,1,
	2,1,2,4,2,154,8,2,11,2,12,2,155,3,2,158,8,2,1,3,1,3,1,3,1,3,5,3,164,8,3,
	10,3,12,3,167,9,3,1,3,1,3,1,3,1,4,1,4,5,4,174,8,4,10,4,12,4,177,9,4,1,4,
	1,4,1,5,4,5,182,8,5,11,5,12,5,183,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,
	1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,
	17,1,18,1,18,1,19,1,19,1,20,4,20,215,8,20,11,20,12,20,216,1,21,1,21,1,22,
	1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,
	29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,
	1,35,1,35,1,36,1,36,1,37,1,37,1,38,4,38,258,8,38,11,38,12,38,259,1,38,1,
	38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,
	1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,
	46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,
	1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,
	53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,57,
	1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,60,4,60,347,8,60,11,
	60,12,60,348,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,
	1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,65,4,65,376,
	8,65,11,65,12,65,377,1,65,1,65,0,0,66,3,0,5,0,7,0,9,0,11,0,13,0,15,0,17,
	0,19,0,21,0,23,0,25,0,27,0,29,0,31,0,33,0,35,0,37,0,39,0,41,0,43,0,45,1,
	47,2,49,3,51,4,53,5,55,6,57,7,59,8,61,9,63,10,65,11,67,12,69,13,71,14,73,
	15,75,16,77,17,79,18,81,19,83,20,85,21,87,22,89,23,91,0,93,0,95,0,97,0,
	99,0,101,0,103,0,105,0,107,0,109,0,111,0,113,0,115,0,117,24,119,0,121,0,
	123,0,125,0,127,0,129,0,131,0,133,25,3,0,1,2,8,1,0,48,57,1,0,123,123,2,
	0,41,41,43,44,2,0,58,58,62,62,3,0,9,10,12,13,32,32,6,0,36,36,45,45,48,57,
	65,90,95,95,97,122,5,0,36,36,48,57,65,90,95,95,97,122,2,0,41,41,44,44,367,
	0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
	0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
	0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
	0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
	0,89,1,0,0,0,1,91,1,0,0,0,1,93,1,0,0,0,1,95,1,0,0,0,1,97,1,0,0,0,1,99,1,
	0,0,0,1,101,1,0,0,0,1,103,1,0,0,0,1,105,1,0,0,0,1,107,1,0,0,0,1,109,1,0,
	0,0,1,111,1,0,0,0,1,113,1,0,0,0,1,115,1,0,0,0,1,117,1,0,0,0,1,119,1,0,0,
	0,1,121,1,0,0,0,1,123,1,0,0,0,1,125,1,0,0,0,1,127,1,0,0,0,1,129,1,0,0,0,
	1,131,1,0,0,0,2,133,1,0,0,0,3,135,1,0,0,0,5,140,1,0,0,0,7,147,1,0,0,0,9,
	159,1,0,0,0,11,171,1,0,0,0,13,181,1,0,0,0,15,185,1,0,0,0,17,187,1,0,0,0,
	19,189,1,0,0,0,21,191,1,0,0,0,23,193,1,0,0,0,25,195,1,0,0,0,27,197,1,0,
	0,0,29,199,1,0,0,0,31,201,1,0,0,0,33,203,1,0,0,0,35,205,1,0,0,0,37,207,
	1,0,0,0,39,209,1,0,0,0,41,211,1,0,0,0,43,214,1,0,0,0,45,218,1,0,0,0,47,
	220,1,0,0,0,49,222,1,0,0,0,51,224,1,0,0,0,53,226,1,0,0,0,55,228,1,0,0,0,
	57,230,1,0,0,0,59,232,1,0,0,0,61,234,1,0,0,0,63,236,1,0,0,0,65,238,1,0,
	0,0,67,240,1,0,0,0,69,242,1,0,0,0,71,244,1,0,0,0,73,248,1,0,0,0,75,252,
	1,0,0,0,77,254,1,0,0,0,79,257,1,0,0,0,81,263,1,0,0,0,83,267,1,0,0,0,85,
	271,1,0,0,0,87,275,1,0,0,0,89,279,1,0,0,0,91,281,1,0,0,0,93,285,1,0,0,0,
	95,289,1,0,0,0,97,293,1,0,0,0,99,297,1,0,0,0,101,301,1,0,0,0,103,305,1,
	0,0,0,105,309,1,0,0,0,107,313,1,0,0,0,109,317,1,0,0,0,111,321,1,0,0,0,113,
	325,1,0,0,0,115,329,1,0,0,0,117,333,1,0,0,0,119,337,1,0,0,0,121,341,1,0,
	0,0,123,346,1,0,0,0,125,354,1,0,0,0,127,359,1,0,0,0,129,364,1,0,0,0,131,
	369,1,0,0,0,133,375,1,0,0,0,135,136,5,84,0,0,136,137,5,82,0,0,137,138,5,
	85,0,0,138,139,5,69,0,0,139,4,1,0,0,0,140,141,5,70,0,0,141,142,5,65,0,0,
	142,143,5,76,0,0,143,144,5,83,0,0,144,145,5,69,0,0,145,6,1,0,0,0,146,148,
	7,0,0,0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,
	150,157,1,0,0,0,151,153,5,46,0,0,152,154,7,0,0,0,153,152,1,0,0,0,154,155,
	1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,158,1,0,0,0,157,151,1,0,0,0,
	157,158,1,0,0,0,158,8,1,0,0,0,159,160,5,34,0,0,160,161,5,123,0,0,161,165,
	1,0,0,0,162,164,8,1,0,0,163,162,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,
	165,166,1,0,0,0,166,168,1,0,0,0,167,165,1,0,0,0,168,169,5,125,0,0,169,170,
	5,34,0,0,170,10,1,0,0,0,171,175,5,34,0,0,172,174,8,2,0,0,173,172,1,0,0,
	0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,178,1,0,0,0,177,175,
	1,0,0,0,178,179,5,34,0,0,179,12,1,0,0,0,180,182,5,33,0,0,181,180,1,0,0,
	0,182,183,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,14,1,0,0,0,185,186,
	5,43,0,0,186,16,1,0,0,0,187,188,5,45,0,0,188,18,1,0,0,0,189,190,5,42,0,
	0,190,20,1,0,0,0,191,192,5,37,0,0,192,22,1,0,0,0,193,194,5,64,0,0,194,24,
	1,0,0,0,195,196,5,94,0,0,196,26,1,0,0,0,197,198,5,91,0,0,198,28,1,0,0,0,
	199,200,5,93,0,0,200,30,1,0,0,0,201,202,5,40,0,0,202,32,1,0,0,0,203,204,
	5,41,0,0,204,34,1,0,0,0,205,206,5,44,0,0,206,36,1,0,0,0,207,208,5,124,0,
	0,208,38,1,0,0,0,209,210,7,3,0,0,210,40,1,0,0,0,211,212,5,34,0,0,212,42,
	1,0,0,0,213,215,7,4,0,0,214,213,1,0,0,0,215,216,1,0,0,0,216,214,1,0,0,0,
	216,217,1,0,0,0,217,44,1,0,0,0,218,219,3,3,0,0,219,46,1,0,0,0,220,221,3,
	5,1,0,221,48,1,0,0,0,222,223,3,7,2,0,223,50,1,0,0,0,224,225,3,9,3,0,225,
	52,1,0,0,0,226,227,3,11,4,0,227,54,1,0,0,0,228,229,3,13,5,0,229,56,1,0,
	0,0,230,231,3,15,6,0,231,58,1,0,0,0,232,233,3,17,7,0,233,60,1,0,0,0,234,
	235,3,19,8,0,235,62,1,0,0,0,236,237,3,21,9,0,237,64,1,0,0,0,238,239,3,23,
	10,0,239,66,1,0,0,0,240,241,3,25,11,0,241,68,1,0,0,0,242,243,3,39,18,0,
	243,70,1,0,0,0,244,245,3,41,19,0,245,246,1,0,0,0,246,247,6,34,0,0,247,72,
	1,0,0,0,248,249,3,43,20,0,249,250,1,0,0,0,250,251,6,35,1,0,251,74,1,0,0,
	0,252,253,3,35,16,0,253,76,1,0,0,0,254,255,3,37,17,0,255,78,1,0,0,0,256,
	258,7,5,0,0,257,256,1,0,0,0,258,259,1,0,0,0,259,257,1,0,0,0,259,260,1,0,
	0,0,260,261,1,0,0,0,261,262,4,38,0,0,262,80,1,0,0,0,263,264,3,31,14,0,264,
	265,1,0,0,0,265,266,6,39,2,0,266,82,1,0,0,0,267,268,3,33,15,0,268,269,1,
	0,0,0,269,270,6,40,3,0,270,84,1,0,0,0,271,272,3,27,12,0,272,273,1,0,0,0,
	273,274,6,41,4,0,274,86,1,0,0,0,275,276,3,29,13,0,276,277,1,0,0,0,277,278,
	6,42,3,0,278,88,1,0,0,0,279,280,5,59,0,0,280,90,1,0,0,0,281,282,3,3,0,0,
	282,283,1,0,0,0,283,284,6,44,5,0,284,92,1,0,0,0,285,286,3,5,1,0,286,287,
	1,0,0,0,287,288,6,45,6,0,288,94,1,0,0,0,289,290,3,7,2,0,290,291,1,0,0,0,
	291,292,6,46,7,0,292,96,1,0,0,0,293,294,3,9,3,0,294,295,1,0,0,0,295,296,
	6,47,8,0,296,98,1,0,0,0,297,298,3,11,4,0,298,299,1,0,0,0,299,300,6,48,9,
	0,300,100,1,0,0,0,301,302,3,13,5,0,302,303,1,0,0,0,303,304,6,49,10,0,304,
	102,1,0,0,0,305,306,3,15,6,0,306,307,1,0,0,0,307,308,6,50,11,0,308,104,
	1,0,0,0,309,310,3,17,7,0,310,311,1,0,0,0,311,312,6,51,12,0,312,106,1,0,
	0,0,313,314,3,19,8,0,314,315,1,0,0,0,315,316,6,52,13,0,316,108,1,0,0,0,
	317,318,3,21,9,0,318,319,1,0,0,0,319,320,6,53,14,0,320,110,1,0,0,0,321,
	322,3,23,10,0,322,323,1,0,0,0,323,324,6,54,15,0,324,112,1,0,0,0,325,326,
	3,25,11,0,326,327,1,0,0,0,327,328,6,55,16,0,328,114,1,0,0,0,329,330,3,39,
	18,0,330,331,1,0,0,0,331,332,6,56,17,0,332,116,1,0,0,0,333,334,3,43,20,
	0,334,335,1,0,0,0,335,336,6,57,1,0,336,118,1,0,0,0,337,338,3,35,16,0,338,
	339,1,0,0,0,339,340,6,58,18,0,340,120,1,0,0,0,341,342,3,37,17,0,342,343,
	1,0,0,0,343,344,6,59,19,0,344,122,1,0,0,0,345,347,7,6,0,0,346,345,1,0,0,
	0,347,348,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,350,1,0,0,0,350,351,
	4,60,1,0,351,352,1,0,0,0,352,353,6,60,20,0,353,124,1,0,0,0,354,355,3,31,
	14,0,355,356,1,0,0,0,356,357,6,61,21,0,357,358,6,61,2,0,358,126,1,0,0,0,
	359,360,3,33,15,0,360,361,1,0,0,0,361,362,6,62,22,0,362,363,6,62,3,0,363,
	128,1,0,0,0,364,365,3,27,12,0,365,366,1,0,0,0,366,367,6,63,23,0,367,368,
	6,63,4,0,368,130,1,0,0,0,369,370,3,29,13,0,370,371,1,0,0,0,371,372,6,64,
	24,0,372,373,6,64,3,0,373,132,1,0,0,0,374,376,8,7,0,0,375,374,1,0,0,0,376,
	377,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,380,6,65,
	3,0,380,134,1,0,0,0,13,0,1,2,149,155,157,165,175,183,216,259,348,377,25,
	5,2,0,6,0,0,5,0,0,4,0,0,5,1,0,7,1,0,7,2,0,7,3,0,7,4,0,7,5,0,7,6,0,7,7,0,
	7,8,0,7,9,0,7,10,0,7,11,0,7,12,0,7,13,0,7,16,0,7,17,0,7,18,0,7,19,0,7,20,
	0,7,21,0,7,22,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ReksioLangLexer.__ATN) {
			ReksioLangLexer.__ATN = new ATNDeserializer().deserialize(ReksioLangLexer._serializedATN);
		}

		return ReksioLangLexer.__ATN;
	}


	static DecisionsToDFA = ReksioLangLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}
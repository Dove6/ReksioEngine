// Generated from ./src/interpreter/script/ReksioLangLexer.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class ReksioLangLexer extends Lexer {
	public static readonly TRUE = 1;
	public static readonly FALSE = 2;
	public static readonly NUMBER = 3;
	public static readonly CODE_STRING = 4;
	public static readonly STRING = 5;
	public static readonly COMMENT_START = 6;
	public static readonly ADD = 7;
	public static readonly SUB = 8;
	public static readonly MUL = 9;
	public static readonly MOD = 10;
	public static readonly DIV = 11;
	public static readonly METHOD_CALL_SYMBOL = 12;
	public static readonly TYPO = 13;
	public static readonly WHITESPACE = 14;
	public static readonly AT = 15;
	public static readonly COMMA = 16;
	public static readonly IDENTIFIER = 17;
	public static readonly BRACKET_START = 18;
	public static readonly BRACKET_END = 19;
	public static readonly OPERATION_GROUPING_START = 20;
	public static readonly OPERATION_GROUPING_END = 21;
	public static readonly STATEMENT_END = 22;
	public static readonly I_WHITESPACE = 23;
	public static readonly EOF = Token.EOF;
	public static readonly INSIDE = 1;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            "';'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "TRUE", 
                                                             "FALSE", "NUMBER", 
                                                             "CODE_STRING", 
                                                             "STRING", "COMMENT_START", 
                                                             "ADD", "SUB", 
                                                             "MUL", "MOD", 
                                                             "DIV", "METHOD_CALL_SYMBOL", 
                                                             "TYPO", "WHITESPACE", 
                                                             "AT", "COMMA", 
                                                             "IDENTIFIER", 
                                                             "BRACKET_START", 
                                                             "BRACKET_END", 
                                                             "OPERATION_GROUPING_START", 
                                                             "OPERATION_GROUPING_END", 
                                                             "STATEMENT_END", 
                                                             "I_WHITESPACE" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", "INSIDE", ];

	public static readonly ruleNames: string[] = [
		"F_TRUE", "F_FALSE", "F_NUMBER", "F_CODE_STRING", "F_STRING", "F_COMMENT_START", 
		"F_ADD", "F_SUB", "F_MUL", "F_MOD", "F_DIV", "F_METHOD_CALL_SYMBOL", "F_OPERATION_GROUPING_START", 
		"F_OPERATION_GROUPING_END", "F_BRACKET_START", "F_BRACKET_END", "F_AT", 
		"F_COMMA", "F_TYPO", "F_WHITESPACE", "TRUE", "FALSE", "NUMBER", "CODE_STRING", 
		"STRING", "COMMENT_START", "ADD", "SUB", "MUL", "MOD", "DIV", "METHOD_CALL_SYMBOL", 
		"TYPO", "WHITESPACE", "AT", "COMMA", "IDENTIFIER", "BRACKET_START", "BRACKET_END", 
		"OPERATION_GROUPING_START", "OPERATION_GROUPING_END", "STATEMENT_END", 
		"I_TRUE", "I_FALSE", "I_NUMBER", "I_CODE_STRING", "I_STRING", "I_COMMENT_START", 
		"I_ADD", "I_SUB", "I_MUL", "I_MOD", "I_DIV", "I_METHOD_CALL_SYMBOL", "I_TYPO", 
		"I_WHITESPACE", "I_AT", "I_COMMA", "I_IDENTIFIER", "I_BRACKET_START", 
		"I_BRACKET_END", "I_OPERATION_GROUPING_START", "I_OPERATION_GROUPING_END",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, ReksioLangLexer._ATN, ReksioLangLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "ReksioLangLexer.g4"; }

	public get literalNames(): (string | null)[] { return ReksioLangLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return ReksioLangLexer.symbolicNames; }
	public get ruleNames(): string[] { return ReksioLangLexer.ruleNames; }

	public get serializedATN(): number[] { return ReksioLangLexer._serializedATN; }

	public get channelNames(): string[] { return ReksioLangLexer.channelNames; }

	public get modeNames(): string[] { return ReksioLangLexer.modeNames; }

	// @Override
	public sempred(localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 36:
			return this.IDENTIFIER_sempred(localctx, predIndex);
		case 58:
			return this.I_IDENTIFIER_sempred(localctx, predIndex);
		}
		return true;
	}
	private IDENTIFIER_sempred(localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return  this.text.match(/[A-Za-z$]/) !== null ;
		}
		return true;
	}
	private I_IDENTIFIER_sempred(localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return  this.text.match(/[A-Za-z$]/) !== null ;
		}
		return true;
	}

	public static readonly _serializedATN: number[] = [4,0,23,357,6,-1,6,-1,
	2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,
	2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,
	7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,
	23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,
	2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,
	38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,
	7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
	52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,
	2,60,7,60,2,61,7,61,2,62,7,62,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
	1,1,2,4,2,141,8,2,11,2,12,2,142,1,2,1,2,4,2,147,8,2,11,2,12,2,148,3,2,151,
	8,2,1,3,1,3,1,3,1,3,5,3,157,8,3,10,3,12,3,160,9,3,1,3,1,3,1,3,1,4,1,4,5,
	4,167,8,4,10,4,12,4,170,9,4,1,4,1,4,1,5,4,5,175,8,5,11,5,12,5,176,1,6,1,
	6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,
	1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,4,19,206,8,19,11,19,12,
	19,207,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,
	1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,
	33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,4,36,245,8,36,11,36,12,36,246,1,36,
	1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,
	41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,
	1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,
	49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,
	1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,56,1,
	56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,4,58,330,8,58,11,58,12,58,331,1,58,
	1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,61,1,
	61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,0,0,63,2,0,4,0,6,0,8,0,10,0,
	12,0,14,0,16,0,18,0,20,0,22,0,24,0,26,0,28,0,30,0,32,0,34,0,36,0,38,0,40,
	0,42,1,44,2,46,3,48,4,50,5,52,6,54,7,56,8,58,9,60,10,62,11,64,12,66,13,
	68,14,70,15,72,16,74,17,76,18,78,19,80,20,82,21,84,22,86,0,88,0,90,0,92,
	0,94,0,96,0,98,0,100,0,102,0,104,0,106,0,108,0,110,0,112,23,114,0,116,0,
	118,0,120,0,122,0,124,0,126,0,2,0,1,7,1,0,48,57,1,0,123,123,2,0,41,41,44,
	44,2,0,58,58,62,62,3,0,9,10,12,13,32,32,6,0,36,36,45,45,48,57,65,90,95,
	95,97,122,5,0,36,36,48,57,65,90,95,95,97,122,344,0,42,1,0,0,0,0,44,1,0,
	0,0,0,46,1,0,0,0,0,48,1,0,0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,
	56,1,0,0,0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,0,
	0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,0,0,
	78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,0,0,84,1,0,0,0,1,86,1,0,0,0,1,88,1,0,
	0,0,1,90,1,0,0,0,1,92,1,0,0,0,1,94,1,0,0,0,1,96,1,0,0,0,1,98,1,0,0,0,1,
	100,1,0,0,0,1,102,1,0,0,0,1,104,1,0,0,0,1,106,1,0,0,0,1,108,1,0,0,0,1,110,
	1,0,0,0,1,112,1,0,0,0,1,114,1,0,0,0,1,116,1,0,0,0,1,118,1,0,0,0,1,120,1,
	0,0,0,1,122,1,0,0,0,1,124,1,0,0,0,1,126,1,0,0,0,2,128,1,0,0,0,4,133,1,0,
	0,0,6,140,1,0,0,0,8,152,1,0,0,0,10,164,1,0,0,0,12,174,1,0,0,0,14,178,1,
	0,0,0,16,180,1,0,0,0,18,182,1,0,0,0,20,184,1,0,0,0,22,186,1,0,0,0,24,188,
	1,0,0,0,26,190,1,0,0,0,28,192,1,0,0,0,30,194,1,0,0,0,32,196,1,0,0,0,34,
	198,1,0,0,0,36,200,1,0,0,0,38,202,1,0,0,0,40,205,1,0,0,0,42,209,1,0,0,0,
	44,211,1,0,0,0,46,213,1,0,0,0,48,215,1,0,0,0,50,217,1,0,0,0,52,219,1,0,
	0,0,54,221,1,0,0,0,56,223,1,0,0,0,58,225,1,0,0,0,60,227,1,0,0,0,62,229,
	1,0,0,0,64,231,1,0,0,0,66,233,1,0,0,0,68,235,1,0,0,0,70,239,1,0,0,0,72,
	241,1,0,0,0,74,244,1,0,0,0,76,250,1,0,0,0,78,252,1,0,0,0,80,254,1,0,0,0,
	82,258,1,0,0,0,84,262,1,0,0,0,86,264,1,0,0,0,88,268,1,0,0,0,90,272,1,0,
	0,0,92,276,1,0,0,0,94,280,1,0,0,0,96,284,1,0,0,0,98,288,1,0,0,0,100,292,
	1,0,0,0,102,296,1,0,0,0,104,300,1,0,0,0,106,304,1,0,0,0,108,308,1,0,0,0,
	110,312,1,0,0,0,112,316,1,0,0,0,114,320,1,0,0,0,116,324,1,0,0,0,118,329,
	1,0,0,0,120,337,1,0,0,0,122,342,1,0,0,0,124,347,1,0,0,0,126,352,1,0,0,0,
	128,129,5,84,0,0,129,130,5,82,0,0,130,131,5,85,0,0,131,132,5,69,0,0,132,
	3,1,0,0,0,133,134,5,70,0,0,134,135,5,65,0,0,135,136,5,76,0,0,136,137,5,
	83,0,0,137,138,5,69,0,0,138,5,1,0,0,0,139,141,7,0,0,0,140,139,1,0,0,0,141,
	142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,150,1,0,0,0,144,146,5,46,
	0,0,145,147,7,0,0,0,146,145,1,0,0,0,147,148,1,0,0,0,148,146,1,0,0,0,148,
	149,1,0,0,0,149,151,1,0,0,0,150,144,1,0,0,0,150,151,1,0,0,0,151,7,1,0,0,
	0,152,153,5,34,0,0,153,154,5,123,0,0,154,158,1,0,0,0,155,157,8,1,0,0,156,
	155,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,161,1,0,
	0,0,160,158,1,0,0,0,161,162,5,125,0,0,162,163,5,34,0,0,163,9,1,0,0,0,164,
	168,5,34,0,0,165,167,8,2,0,0,166,165,1,0,0,0,167,170,1,0,0,0,168,166,1,
	0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,168,1,0,0,0,171,172,5,34,0,0,
	172,11,1,0,0,0,173,175,5,33,0,0,174,173,1,0,0,0,175,176,1,0,0,0,176,174,
	1,0,0,0,176,177,1,0,0,0,177,13,1,0,0,0,178,179,5,43,0,0,179,15,1,0,0,0,
	180,181,5,45,0,0,181,17,1,0,0,0,182,183,5,42,0,0,183,19,1,0,0,0,184,185,
	5,37,0,0,185,21,1,0,0,0,186,187,5,64,0,0,187,23,1,0,0,0,188,189,5,94,0,
	0,189,25,1,0,0,0,190,191,5,91,0,0,191,27,1,0,0,0,192,193,5,93,0,0,193,29,
	1,0,0,0,194,195,5,40,0,0,195,31,1,0,0,0,196,197,5,41,0,0,197,33,1,0,0,0,
	198,199,5,64,0,0,199,35,1,0,0,0,200,201,5,44,0,0,201,37,1,0,0,0,202,203,
	7,3,0,0,203,39,1,0,0,0,204,206,7,4,0,0,205,204,1,0,0,0,206,207,1,0,0,0,
	207,205,1,0,0,0,207,208,1,0,0,0,208,41,1,0,0,0,209,210,3,2,0,0,210,43,1,
	0,0,0,211,212,3,4,1,0,212,45,1,0,0,0,213,214,3,6,2,0,214,47,1,0,0,0,215,
	216,3,8,3,0,216,49,1,0,0,0,217,218,3,10,4,0,218,51,1,0,0,0,219,220,3,12,
	5,0,220,53,1,0,0,0,221,222,3,14,6,0,222,55,1,0,0,0,223,224,3,16,7,0,224,
	57,1,0,0,0,225,226,3,18,8,0,226,59,1,0,0,0,227,228,3,20,9,0,228,61,1,0,
	0,0,229,230,3,22,10,0,230,63,1,0,0,0,231,232,3,24,11,0,232,65,1,0,0,0,233,
	234,3,38,18,0,234,67,1,0,0,0,235,236,3,40,19,0,236,237,1,0,0,0,237,238,
	6,33,0,0,238,69,1,0,0,0,239,240,3,34,16,0,240,71,1,0,0,0,241,242,3,36,17,
	0,242,73,1,0,0,0,243,245,7,5,0,0,244,243,1,0,0,0,245,246,1,0,0,0,246,244,
	1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,249,4,36,0,0,249,75,1,0,0,0,
	250,251,3,30,14,0,251,77,1,0,0,0,252,253,3,32,15,0,253,79,1,0,0,0,254,255,
	3,26,12,0,255,256,1,0,0,0,256,257,6,39,1,0,257,81,1,0,0,0,258,259,3,28,
	13,0,259,260,1,0,0,0,260,261,6,40,2,0,261,83,1,0,0,0,262,263,5,59,0,0,263,
	85,1,0,0,0,264,265,3,2,0,0,265,266,1,0,0,0,266,267,6,42,3,0,267,87,1,0,
	0,0,268,269,3,4,1,0,269,270,1,0,0,0,270,271,6,43,4,0,271,89,1,0,0,0,272,
	273,3,6,2,0,273,274,1,0,0,0,274,275,6,44,5,0,275,91,1,0,0,0,276,277,3,8,
	3,0,277,278,1,0,0,0,278,279,6,45,6,0,279,93,1,0,0,0,280,281,3,10,4,0,281,
	282,1,0,0,0,282,283,6,46,7,0,283,95,1,0,0,0,284,285,3,12,5,0,285,286,1,
	0,0,0,286,287,6,47,8,0,287,97,1,0,0,0,288,289,3,14,6,0,289,290,1,0,0,0,
	290,291,6,48,9,0,291,99,1,0,0,0,292,293,3,16,7,0,293,294,1,0,0,0,294,295,
	6,49,10,0,295,101,1,0,0,0,296,297,3,18,8,0,297,298,1,0,0,0,298,299,6,50,
	11,0,299,103,1,0,0,0,300,301,3,20,9,0,301,302,1,0,0,0,302,303,6,51,12,0,
	303,105,1,0,0,0,304,305,3,22,10,0,305,306,1,0,0,0,306,307,6,52,13,0,307,
	107,1,0,0,0,308,309,3,24,11,0,309,310,1,0,0,0,310,311,6,53,14,0,311,109,
	1,0,0,0,312,313,3,38,18,0,313,314,1,0,0,0,314,315,6,54,15,0,315,111,1,0,
	0,0,316,317,3,40,19,0,317,318,1,0,0,0,318,319,6,55,0,0,319,113,1,0,0,0,
	320,321,3,34,16,0,321,322,1,0,0,0,322,323,6,56,16,0,323,115,1,0,0,0,324,
	325,3,36,17,0,325,326,1,0,0,0,326,327,6,57,17,0,327,117,1,0,0,0,328,330,
	7,6,0,0,329,328,1,0,0,0,330,331,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,
	332,333,1,0,0,0,333,334,4,58,1,0,334,335,1,0,0,0,335,336,6,58,18,0,336,
	119,1,0,0,0,337,338,3,30,14,0,338,339,1,0,0,0,339,340,6,59,19,0,340,341,
	6,59,20,0,341,121,1,0,0,0,342,343,3,32,15,0,343,344,1,0,0,0,344,345,6,60,
	21,0,345,346,6,60,2,0,346,123,1,0,0,0,347,348,3,26,12,0,348,349,1,0,0,0,
	349,350,6,61,22,0,350,351,6,61,1,0,351,125,1,0,0,0,352,353,3,28,13,0,353,
	354,1,0,0,0,354,355,6,62,23,0,355,356,6,62,2,0,356,127,1,0,0,0,11,0,1,142,
	148,150,158,168,176,207,246,331,24,6,0,0,5,1,0,4,0,0,7,1,0,7,2,0,7,3,0,
	7,4,0,7,5,0,7,6,0,7,7,0,7,8,0,7,9,0,7,10,0,7,11,0,7,12,0,7,13,0,7,15,0,
	7,16,0,7,17,0,7,18,0,5,0,0,7,19,0,7,20,0,7,21,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ReksioLangLexer.__ATN) {
			ReksioLangLexer.__ATN = new ATNDeserializer().deserialize(ReksioLangLexer._serializedATN);
		}

		return ReksioLangLexer.__ATN;
	}


	static DecisionsToDFA = ReksioLangLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}